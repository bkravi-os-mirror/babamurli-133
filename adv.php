<!DOCTYPE html><?php  set_time_limit(3000);   //time limit (in second) this script is allowed to run. Will error out if takes more time than this  ini_set("error_log", "./error_log");  date_default_timezone_set('Asia/Calcutta');    $message = '';  $rootdir = $_SERVER['DOCUMENT_ROOT'];  $files_to_check_timestamp = array(    "$rootdir/00. Htm/01. Hindi.html",    "$rootdir/00. Htm/02. English.html",    "$rootdir/00. Htm/03. Tamil.html",    "$rootdir/00. Htm/04. Telugu.html",    "$rootdir/00. Htm/12. Marathi.html",    "$rootdir/00. Htm/38. Hungarian.html",    "$rootdir/00-htm/Todays Thoughts.htm",    "$rootdir/00-htm/Todays Moti.htm",    "$rootdir/00-htm/Full Stop.htm",    "$rootdir/00-Murlis/Mobile/Hindi.htm",    "$rootdir/00-Murlis/Mobile/English.htm",    "$rootdir/00-Murlis/Mobile/Marathi.htm",    "$rootdir/00-Murlis/Mobile/Chinese.htm",  );    $main_dirs = array("00. Htm", "00-htm", "00-Murlis/Mobile");  $ignored = array('.', '..', '.svn', '.htaccess', '.mp5');    $valid_exts = array(    $main_dirs[0] => array ("html"),   //i.e. for "00. Htm"    $main_dirs[1] => array ("htm"),   //i.e. for "00-htm"    $main_dirs[2] => array ("htm")   //i.e. for "00-Murlis/Mobile"  );    $exclude_files_containing_words = array(    $main_dirs[0] => array ("AddNewDateRow"),   //i.e. for "00. Htm"    $main_dirs[1] => array ("quiz", "AddNewDateRow"),   //i.e. for "00-htm"    $main_dirs[2] => array ("replace")   //i.e. for "00-Murlis/Mobile"  );    $exclude_files = array(    $main_dirs[0] => array (   //i.e. for "00. Htm"      "addnewnaterow.bat", "addnewdaterow.vbs"    ),    $main_dirs[1] => array (   //i.e. for "00-htm"      "avyakt murli quiz.htm", "todays purusharth - suraj bhai- telugu.htm", "bapdada divine message-tamil.htm",      "mamma classes - tamil.htm", "sachin bhai classes - tamil.htm"    ),    $main_dirs[2] => array (   //i.e. for "00-Murlis/Mobile"      "daily murli.htm", "regional.htm", "c.htm", "avyakt murli revision.htm",      "international.htm", "h.htm", "e.htm", "other.htm", "o.htm", "n.htm"    )  );    $valid_files = array (    $main_dirs[0] => array (   //i.e. for "00. Htm"      "01. Hindi.html",      "02. English.html",      "03. Tamil.html",      "04. Telugu.html",      "05. Kannada.html",      "06. Malayalam.html",      "07. Bengali.html",      "08. Assame.html",      "10. Odiya.html",      "11. Punjabi.html",      "12. Marathi.html",      "13. Gujarati.html",      "30. Nepali.html",      "31. Deutsch.html",      "32. Spanish.html",      "33. Italian.html",      "34. Chinese.html",      "35. Tamil-Lanka.html",      "36. French.html",      "37. Greek.html",      "38. Hungarian.html",      "39. Korean.html",      "40. Polish.html",      "41. Portuguese.html",      "42. Sindhi.html",      "43. Thai.html",      "44. Sinhala.html",    ),    $main_dirs[1] => array (   //i.e. for "00-htm"      "Avyakt Palna.htm",      "Full Stop.htm",      "Suraj Bhai Classes - Tamil.htm",      "Suraj Bhai Classes 1- Tamil.htm",      "Todays Calendar.htm",      "Todays Commentary.htm",      "Todays Moti.htm",      "Todays Purusharth - Suraj Bhai.htm",      "Todays Thoughts.htm",    ),    $main_dirs[2] => array (   //i.e. for "00-Murlis/Mobile"      "Assame.htm",      "Bengali.htm",      "Chinese.htm",      "Deutsch.htm",      "English.htm",      "French.htm",      "Greek.htm",      "Gujarati.htm",      "Hindi.htm",      "Hungarian.htm",      "Italian.htm",      "Kannada.htm",      "Korean.htm",      "Malayalam.htm",      "Marathi.htm",      "Nepali.htm",      "Odiya.htm",      "Polish.htm",      "Portuguese.htm",      "Punjabi.htm",      "Sindhi.htm",      "Sinhala.htm",      "Spanish.htm",      "Tamil.htm",      "TamilLanka.htm",      "Telugu.htm",      "Thai.htm",    )  );    function addNextDayRowAbove($currDate, $dir_full_path_read, $array_of_files, $how_many_times) {   //this is for desktop htms    global $main_dirs, $rootdir;    if(count($array_of_files) < 1) return "No files to process!";    if(!preg_match('/[0-3][0-9]\.[0-1][0-9]\.2[0-9]/',$currDate)) return "Wrong date received: $currDate";    $dt_array = explode('.', $currDate);    $dd = $dt_array[0]; $mm = $dt_array[1]; $yy = $dt_array[2];    if($dd > "31" || $mm > "12") return "Wrong date received: $currDate";    for($i = 1; $i <= $how_many_times; $i++) {      $date = datetime::createfromformat('Y-m-d', "20$yy-$mm-$dd");   //create date object from string      date_add($date, date_interval_create_from_date_string("1 days"));      $nextDate = date_format($date, "d.m.y");      $tmp = explode(".", $nextDate);      $new_dir_name = $tmp[0] . "." . $tmp[1];      $dir_full_path_write = $dir_full_path_read;      if(preg_match('/[0-9\.]$/', $dir_full_path_read)) {   //i.e. if dir name ends with a number or a dot, then make new dir outside it. else make new dir inside curr dir only        $dir_full_path_write = substr($dir_full_path_read, 0, strripos($dir_full_path_read, "/"));      }      $new_dir_full_path = "$dir_full_path_write/$new_dir_name";      if(!is_dir($new_dir_full_path)) if(!mkdir($new_dir_full_path)) return "Couldn't create dir: $new_dir_full_path";      $currPostfixForQuiz = "murli-quiz-$dd" .$mm. "20$yy";      $nextPostfixForQuiz = "murli-quiz-" . $tmp[0] . $tmp[1] . "20" . $tmp[2];      foreach($array_of_files as $file) {        $rerun = false;        $myfile = fopen("$dir_full_path_read/$file", "r");        if(!$myfile) return "Unable to open file to read: $dir_full_path_read/$file!";        $readAll = fread($myfile, filesize("$dir_full_path_read/$file"));        fclose($myfile);        $pos_of_id_daily_section = strpos($readAll, "id='daily-section'");   //for Hindi html, second table MUST have an id='daily-section' attribute        if($file === "01. Hindi.html" && $pos_of_id_daily_section !== false) {   //for Hindi html, there are two <table> to update          $how_many_tables = 2;        } else {          $how_many_tables = 1;        }        for($i = 1; $i <= $how_many_tables; $i++) {   //If there are more than one <table> to update in html          if(strpos($readAll, $nextDate) !== false && $rerun === false) return "File $dir_full_path_read/$file is already having future date i.e. $nextDate Suspended all operations. Please check on this first!";          $new_file_content = '';          $old_row = '';                    if($rerun) {            $part1 = substr($readAll, 0, strpos($readAll, $currDate, $pos_of_id_daily_section));            $part2 = substr($readAll, strpos($readAll, $currDate, $pos_of_id_daily_section));          } else {            $part1 = substr($readAll, 0, strpos($readAll, $currDate));            $part2 = substr($readAll, strpos($readAll, $currDate));          }                    $entry_point_for_new_row = strripos($part1, "<tr>");          $new_file_content = $new_file_content . substr($part1, 0, $entry_point_for_new_row);                    $old_row = substr($part1, $entry_point_for_new_row);          $old_row = $old_row . substr($part2, 0, strpos($part2, "</tr>")) . "</tr>";          $old_row = str_replace($currPostfixForQuiz, $nextPostfixForQuiz, $old_row);          $new_row = str_replace($currDate, $nextDate, $old_row);                    $new_file_content = $new_file_content . $new_row . substr($readAll, $entry_point_for_new_row);          $readAll = $new_file_content;   //now new file contents should become readAll!          $rerun = true;        }        $myNewFile = fopen("$new_dir_full_path/$file", "w");        if(!$myNewFile) return "Unable to open file to write: $new_dir_full_path/$file!";        if(fwrite($myNewFile, $new_file_content)) {          //success message here... or any processing like count++        } else {          return "Couldn't write into file: $myNewFile";        }        fclose($myNewFile);      }      $currDate = $nextDate;      $dt_array = explode('.', $currDate);      $dd = $dt_array[0]; $mm = $dt_array[1]; $yy = $dt_array[2];      $dir_full_path_read = $new_dir_full_path;    }    return true;  }    function replaceWithNextDayDate($currDate, $dir_full_path_read, $array_of_files, $how_many_times) {   //this is for mobile htms    if(count($array_of_files) < 1) return "No files to process!";    if(!preg_match('/[0-3][0-9]\.[0-1][0-9]\.2[0-9]/',$currDate)) return "Wrong date received: $currDate";    $dt_array = explode('.', $currDate);    $dd = $dt_array[0]; $mm = $dt_array[1]; $yy = $dt_array[2];    if($dd > "31" || $mm > "12") return "Wrong date received: $currDate";    for($i = 1; $i <= $how_many_times; $i++) {      $date = datetime::createfromformat('Y-m-d', "20$yy-$mm-$dd");   //create date object from string      date_add($date, date_interval_create_from_date_string("1 days"));      $nextDate = date_format($date, "d.m.y");      date_add($date, date_interval_create_from_date_string("-2 days"));      $prevDate = date_format($date, "d.m.y");      $tmp = explode(".", $nextDate);      $new_dir_name = $tmp[0] . "." . $tmp[1];      $dir_full_path_write = $dir_full_path_read;      if(preg_match('/[0-9\.]$/', $dir_full_path_read)) {   //i.e. if dir name ends with a number or a dot, then make new dir outside it. else make new dir inside curr dir only        $dir_full_path_write = substr($dir_full_path_read, 0, strripos($dir_full_path_read, "/"));      }      $new_dir_full_path = "$dir_full_path_write/$new_dir_name";      if(!is_dir($new_dir_full_path)) if(!mkdir($new_dir_full_path)) return "Couldn't create dir: $new_dir_full_path";      foreach($array_of_files as $file) {        $myfile = fopen("$dir_full_path_read/$file", "r");        if(!$myfile) return "Unable to open file to read: $dir_full_path_read/$file!";        $readAll = fread($myfile, filesize("$dir_full_path_read/$file"));        fclose($myfile);        if(strpos($readAll, $nextDate) !== false) return "File $dir_full_path_read/$file is already having future date i.e. $nextDate Suspended all operations. Please check on this first!";        $new_file_content = str_replace($currDate, $nextDate, $readAll);        $new_file_content = str_replace($prevDate, $currDate, $new_file_content);                copy("$dir_full_path_read/$file", "$new_dir_full_path/$currDate-$file");   //copying current file after renaming as previous day file        $myNewFile = fopen("$new_dir_full_path/$file", "w");        if(!$myNewFile) return "Unable to open file to write: $new_dir_full_path/$file!";        if(fwrite($myNewFile, $new_file_content)) {          //success message here... or any processing like count++        } else {          return "Couldn't write into file: $myNewFile";        }        fclose($myNewFile);              }      $currDate = $nextDate;      $dt_array = explode('.', $currDate);      $dd = $dt_array[0]; $mm = $dt_array[1]; $yy = $dt_array[2];      $dir_full_path_read = $new_dir_full_path;    }    return true;  }    function startsWithDate($str) {    return preg_match('/[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]/', $str) === 1;  }    function get_subdirs_only($dir_full_path, $dir_name_only) {    global $ignored;    $files = array();        foreach(scandir($dir_full_path) as $file) {      if(in_array($file, $ignored) || (is_file("$dir_full_path/$file"))) continue;      $files["$dir_name_only/$file"] = filemtime($dir_full_path . '/' . $file);    }    ksort($files);    $files = array_keys($files);    return ($files) ? $files : false;  }    function is_dir_empty($dir_full_path) {    if(!is_readable($dir_full_path)) return false;    return (count(scandir($dir_full_path)) == 2);   //ignoring default 2 directories '.' & '..'  }    function getParentDir($dir_only_path) {   //will give "00. Htm", "00-htm", "00-Murlis/Mobile" etc    global $main_dirs;    if(in_array($dir_only_path, $main_dirs)) return $dir_only_path;    return ($a=strrpos($dir_only_path, "/")) === false ? $dir_only_path : ($a === 0 ? "/" : substr($dir_only_path, 0, $a));  }    function stringContainsAny($string_to_test, $array_of_substrs) {    $string_to_test = strtolower($string_to_test);    if(count($array_of_substrs) < 1) return false;    for($i = 0; $i < count($array_of_substrs); $i++) {      if(strpos($string_to_test, strtolower($array_of_substrs[$i])) !== false) return true;    }    return false;  }    function addDaysToDate($days_to_add, $string_date, $date_fmt, $date_return_fmt="") {   //NOTE: $string_date must be in $date_fmt format. otherwise you won't get expected results    $date_return_fmt = empty($date_return_fmt) ? $date_fmt : $date_return_fmt;    $date_obj = datetime::createfromformat($date_fmt, $string_date);    date_add($date_obj, date_interval_create_from_date_string("$days_to_add days"));    return date_format($date_obj, $date_return_fmt);  }    function isAlreadyCreatedForTomorrow() {    //return false;    global $files_to_check_timestamp;    $today_date = date('Y-m-d');    $tomorrow_date = addDaysToDate(1, $today_date, 'Y-m-d', 'd.m.');   //e.g. 22.03.    foreach($files_to_check_timestamp as $file_to_check) {      if($readAll = file_get_contents($file_to_check)) {        if(strpos($readAll, $tomorrow_date) !== false) return $file_to_check;      }    }    return false;  }    $build_dir_array = array();   //$build_dir_array[0] = array("00. Htm", array("28.02", "29.02")) and so on...    $loop = 0;  foreach($main_dirs as $d) {    $build_dir_array[$loop++] = array($d, get_subdirs_only("$rootdir/$d", "$d"));   //$build_dir_array[0] = array("00. Htm", array("28.02", "29.02")) and so on...  }    $createForTomorrow = false;  $is_already_done = false;    if(isset($_POST['create']) && isset($_POST['dir']) && isset($_POST['datelabel']) &&    !empty($_POST['dir']) && !empty($_POST['datelabel'])) {   //means 'create' submit button is clicked    if(isset($_POST['create_and_move_for_tomorrow']) && !empty($_POST['create_and_move_for_tomorrow'])) {      $createForTomorrow = $_POST['create_and_move_for_tomorrow'] === "on" ? true : false;    }    $selected_option = '';    $final_processed_files = array();    $selected_option = $_POST['dir'];    $above_this_these_many = $_POST['datelabel'];    $decoded_selected_option = trim(str_replace('^', '.', $selected_option));    $relative_parent = getParentDir($decoded_selected_option);   //will give "00. Htm", "00-htm", "00-Murlis/Mobile" etc    $selected_source_dir = "$rootdir/$decoded_selected_option";    $standard_file_counts = count($valid_files[$relative_parent]);    $message = "Below Results:<ul>";    //Below overwriting all values if we need to create and move for tomorrow    $today_date = date("d.m.y");    $tomorrow_date_as_folder_name = addDaysToDate(1, $today_date, 'd.m.y', 'd.m');    if($createForTomorrow) {      $above_this_these_many = "$today_date^1";   //i.e. create only 1 day files. New lines will be added above current date      $selected_source_dir = "$rootdir/$relative_parent";    }    try {      //Printing all $_POST keys and values      //echo '<blockquote><table>'; foreach ($_POST as $key => $value) {echo "<tr><td>$key</td><td>$value</td></tr>";} echo '</table></blockquote>';      $tmp_array = array();      foreach(scandir($selected_source_dir) as $file) {   //scan through all the files inside the folder        $ext = pathinfo($file, PATHINFO_EXTENSION);        if(in_array($file, $ignored) || // ignore ., .., .htaccess etc          !(in_array($ext, $valid_exts[$relative_parent])) ||   //file ext must be valid          stringContainsAny($file, $exclude_files_containing_words[$relative_parent]) ||   //filename has words those should be ignored          in_array(strtolower($file), $exclude_files[$relative_parent]) ||   //file should not be the ones as declared in ignore list          startsWithDate($file)        ) continue;        else {          if(in_array($file, $valid_files[$relative_parent])) {   //finally OK to process            array_push($tmp_array, $file);          } else {            $message = $message . "<li><span class='bg-danger text-white'>File $selected_source_dir/$file is either not included in ignore list or it is not yet configured to be processed!</span></li>";          }        }      }      $final_processed_files[$relative_parent] = $tmp_array;      $message = $message . "</ul>";      $valid_file_processed_counts = count($final_processed_files[$relative_parent]);      if($tmp_array = array_diff($valid_files[$relative_parent], $final_processed_files[$relative_parent])) {        $files_not_processed = "<ul><li>";        $files_not_processed = $files_not_processed . implode("</li><li>", $tmp_array);        $files_not_processed = $files_not_processed . "</li></ul>";        $message = $message . "<span class='bg-danger text-white'>Below standard files were <u><b>NOT</b></u> processed as they are <u><b>NOT</b></u> present in <u>'$decoded_selected_option'</u>. Please check!!$files_not_processed</span>";      }      $tmp = explode("^", $above_this_these_many);      if(strpos(strtolower($relative_parent), 'mobile') !== false) $result = replaceWithNextDayDate($tmp[0], $selected_source_dir, $final_processed_files[$relative_parent], (int)$tmp[1]);      else $result = addNextDayRowAbove($tmp[0], $selected_source_dir, $final_processed_files[$relative_parent], (int)$tmp[1]);      if($result === true) {        $message = $message . "<span class='bg-success text-white'>standard_file_counts:$standard_file_counts, valid_file_processed_counts:$valid_file_processed_counts</span><br>";        if($createForTomorrow) {   //i.e. move tomorrow's files out and delete the folder          $move_cmd = "mv -f '$rootdir/$relative_parent'/$tomorrow_date_as_folder_name/* '$rootdir/$relative_parent'";          $delete_cmd = "rm -rf '$rootdir/$relative_parent'/$tomorrow_date_as_folder_name";          shell_exec($move_cmd);          shell_exec($delete_cmd);          //echo("$move_cmd<br>$delete_cmd<br><br>If its ok, remove this echo statement and run system command");        }      } else {        $message = $message . "<span class='bg-danger text-white'>$result</span><br>";      }          } catch(Exception $e) {      $message = $message . "<span class='bg-danger text-white'>ERROR/Exception: " . $e->getMessage() . "</span>";    }  } else if(isset($_POST['create'])){    $message = $message . "<span class='bg-danger text-white'>Invalid values for the Forms</span>";  } else if(!isset($_POST['create'])) {    $is_already_done = isAlreadyCreatedForTomorrow();    if($is_already_done !== false) {      $message = "<kbd style='line-height:40px;font-size:x-large;background-color:crimson;'>CAN NOT PROCEED!!!As you have already ran this script for tomorrow! Check tomorrow's date is already updated in file <mark>$is_already_done</mark>";    }  }?><html lang="en">  <head>    <title>Advance HTM</title>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0">    <link rel="icon" type="image/png" href="images/bks/sb_72x72.png"/>    <link rel="stylesheet" type="text/css" href="css/bootstrap.min.4_3_1.css">    <link rel="stylesheet" type="text/css" href="fonts/font-awesome-4.7.0/css/font-awesome.min.css">    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Ubuntu"/>    <link rel="stylesheet" href="js/flash/dist/flash.css">    <script src="js/jquery.slim.min.3_4_1.js"></script>    <script src="js/jquery.min.js"></script>    <script src="js/bootstrap.bundle.min.4_3_1.js"></script>    <script src="js/flash/dist/flash.min.js"></script>    <script src="js/flash/dist/flash.jquery.min.js"></script>    <style>      .navbar-nav > li > a {        padding-top: 8px;        padding-bottom: 8px;        height: 35px;        line-height: 35px;      }      .noselect {        -webkit-touch-callout: none; /* iOS Safari */          -webkit-user-select: none; /* Safari */           -khtml-user-select: none; /* Konqueror HTML */             -moz-user-select: none; /* Firefox */              -ms-user-select: none; /* Internet Explorer/Edge */                  user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */      }          </style>  </head>  <body style="padding-top: 70px;font-family: Ubuntu;background-color: #FFEBCC">    <?php      $brand_name = 'Create Advance HTMs <i class="fa fa-file-code-o" aria-hidden="true"></i>';      include('nav_header.php');    ?>    <div class="container" style="margin-bottom: 45px;">      <div style="height: 10px;"></div>      <form method="post" action="" onsubmit="return preProcess(this);" style=<?php echo $is_already_done === false ? "'display:inline-block;'" : "'display:none;'";?>>        <div class="form-group row" style="margin-top:10px;">          <label for="dir" class="col-sm-4 col-form-label">Source Folder</label>          <div class="col-sm-8 form-inline">            <select class="form-control" id="dir" name="dir" onchange="setNewDate()">              <?php                for($i = 0; $i < count($build_dir_array); $i++) {   //$build_dir_array[0] = array("00. Htm", array("28.02", "29.02"))                  $caption = $build_dir_array[$i][0];                  $sub_dir_array = $build_dir_array[$i][1];                  $val = trim(str_replace('.', '^', $caption));   //i.e. 00. Htm => 00^ Htm & this is because POST converts all "." to "_"                  $selected = $val === $selected_option ? 'selected' : '';                  echo "<option value='$val' $selected>$caption</option>";                  if(is_array($sub_dir_array) || is_object($sub_dir_array)) {   //this is to avoid warning in case $sub_dir_array is null or none                    foreach($sub_dir_array as $sub_dir) {                      $caption = $sub_dir;                      if($caption === "00-htm") {continue;}   //Change-2020-04-10: No more maintaining 00-htm now                      $val = trim(str_replace('.', '^', $caption));                      $selected = $val === $selected_option ? 'selected' : '';                      echo "<option value='$val' $selected>&nbsp;&nbsp;$caption</option>";                    }                  }                }              ?>            </select>          </div>        </div>        <div class="form-group row" style="margin-top:10px;">          <div class="col-sm-12">            <label for="create_and_move_for_tomorrow" class="form-check-label" style="margin-left: 20px;">              <input class="form-check-input" type="checkbox" id="create_and_move_for_tomorrow" name="create_and_move_for_tomorrow" onclick="checkBoxSeletor()">              !! Directly Create From Source & Move for Tomorrow !!            </label>          </div>        </div>        <div class="form-group row" style="margin-top:10px;">          <label for="datelabel" class="col-sm-4 col-form-label">Above This^These Many (e.g.19.02.20^2)</label>          <div class="col-sm-8 form-inline">            <input type="text" class="form-control" id="datelabel" name="datelabel">          </div>        </div>        <button type="submit" id="create" name="create" class="btn btn-danger" style="width:100%;">          <span id="loading_spinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display:inline-block;">&nbsp;</span>          Create        </button>      </form>      <div class="card bg-info text-white mt-3">        <div class="card-body">          <?php if(strlen($message) > 2) echo $message; else echo 'Output here...' ?>        </div>      </div>      <a href="i.php" class="btn btn-success" style="position: fixed;bottom: 3px;right: 3px;">      Go Home      </a>    </div>    <script language="javascript">            function checkBoxSeletor() {        document.getElementById("datelabel").readOnly = document.getElementById("create_and_move_for_tomorrow").checked      }            function getDateObj(dd_mm_yy) {   //arg must be in DD.MM.YY format. It returns a Date object        if(dd_mm_yy.match(/[0-3][0-9]\.[0-1][0-9]\.2[0-9]/) != null) {          ar = dd_mm_yy.split("\.");          ndt = new Date("20" + ar[2] + "-" + ar[1] + "-" + ar[0]);          return ndt == "Invalid Date" ? null : ndt;   //year obviously should be more than 2000        } else {          return null;        }      }            function getDDMMYYDateStr(date_obj) {        var yy = ((date_obj.getFullYear() + '').substr(2));        return ("0" + date_obj.getDate()).slice(-2) + "." + ("0" + (date_obj.getMonth() + 1)).slice(-2) + "." + yy;      }            function getYYYYMMDDDateStr(date_obj) {        var yyyy = date_obj.getFullYear();        return yyyy + ("0" + (date_obj.getMonth() + 1)).slice(-2) + ("0" + date_obj.getDate()).slice(-2);      }            function addDays(theDate, days) {        return new Date(theDate.getTime() + days * 24 * 60 * 60 * 1000);      }            function setNewDate() {        var choosen_dir = document.getElementById("dir").value.replace(/\^/g, "\.");        var val = '';        var d = new Date();        var yy = ((d.getFullYear()+'').substr(2));        var yyyy = d.getFullYear();        currDate_YYYYMMDD = getYYYYMMDDDateStr(d);        currDate_DDMMYY = getDDMMYYDateStr(d);        if(choosen_dir.match(/\d$/) != null) {   //means string ends with a number. it means its a subfolder          idx = choosen_dir.lastIndexOf("/");          if(idx < 0) val = '';   //since its a subfolder, it must have "/"          else {            part = choosen_dir.substr(idx + 1);   //gives the name of the subfolder            if(part.match(/\d\d\.\d\d$/) != null) {   //subfolder name must be like 29.02, 12.02 etc              ar = part.split("\.");              yyyymmdd = yyyy + ar[1] + ar[0];              if(currDate_YYYYMMDD > yyyymmdd) yy++;   //this is to set if the subfolder is for next year              val = ar[0] + "." + ar[1] + "." + yy;            } else {   //this is fallback in case subfolder name is not like 29.02, 12.02 etc              val = currDate_DDMMYY;            }          }        } else {          val = currDate_DDMMYY;        }        above_this = val;        document.getElementById('datelabel').value = above_this + "^1";      }            function isValidDate() {        val = document.getElementById('datelabel').value;   //must be e.g. 19.02.20^1        if(val.match(/[0-3][0-9]\.[0-1][0-9]\.2[0-9]\^[1-9]/) == null) return false;   //no more than 10 loops        dt1 = val.split("\^")[0];        loop_val = val.split("\^")[1];        dd_dt1 = dt1.split("\.")[0];  mm_dt1 = dt1.split("\.")[1];  yy_dt1 = dt1.split("\.")[2];        if(dd_dt1 > 31 || mm_dt1 > 12 || dd_dt1 == "00" || mm_dt1 == "00") return false;        if(isNaN(loop_val)) return false;        if(loop_val > 10) return false;        return true;      }            function preProcess(form) {        if(!isValidDate()) {   //must be e.g. 19.02.20^1          alert("Wrong Above This^These Many provided !! The format must be like Above This^These Many (e.g.19.02.20^2)\n\nAnd the maximum 'These Many' should be 10!");          return false;        } else {          disableFormControls();          return true;        }      }            function disableFormControls() {        document.getElementById("loading_spinner").style.display = "inline-block";        $('#create').addClass('disabled');      }            function enableFormControls() {        document.getElementById("loading_spinner").style.display = "none";        setNewDate();      }            window.onload=enableFormControls();        </script>  </body></html>